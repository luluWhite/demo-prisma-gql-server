type Query {
  feed: [Post!]!
  drafts: [Post!]!
  post(id: ID!): Post
  courses(
    first: Int
    skip: Int
    filter: String
    orderBy: CourseOrderByInput
  ): CourseFeed!
  coursesConnection: CourseConnection!
  course(where: CourseWhereUniqueInput!): Course
  user(where: UserWhereUniqueInput!): User
}

type Mutation {
  createDraft(title: String!, content: String): Post
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!,
    where: CourseWhereUniqueInput!): Course
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deletePost(id: ID!): Post
  publish(id: ID!): Post
  signupUser(data: UserBasicInput!): AuthenPayload!
  loginUser(data: UserBasicInput!): AuthenPayload!
}

type CourseFeed {
  courses: [Course!]!
  count: Int!
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

type AggregateCourse {
  count: Int!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type CourseEdge {
  node: Course!
  cursor: String!
}

type AuthenPayload {
  token: String!
  user: User
}

type User {
  id: ID!
  email: String!
  # u can also customize user type, for example, no need password here
  relatedCourses: [Course!]!
}

input UserBasicInput {
  # id: ID # no need id here
  email: String!
  password: String!
}

type Post {
  id: ID!
  published: Boolean!
  title: String!
  content: String!
}

scalar DateTime
# if you create new type and deploy in prisma,
# you have to copy it from prisma-schema.js to here manully
type Course {
  id: ID!
  isPublished: Boolean!
  name: String!
  description: String!
  createdAt: DateTime!
  postedBy: User # no successful, may need make postedBy as new type, and then do child resolver for it.
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
}

input CourseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isPublished: Boolean
  isPublished_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  postedBy: UserWhereInput
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  relatedCourses_every: CourseWhereInput
  relatedCourses_some: CourseWhereInput
  relatedCourses_none: CourseWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input CourseCreateInput {
  id: ID
  isPublished: Boolean
  name: String!
  description: String!
  postedBy: UserCreateOneWithoutCoursesInput
}

input UserCreateOneWithoutCoursesInput {
  create: UserCreateWithoutCoursesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCoursesInput {
  id: ID
  email: String!
  password: String!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input CourseUpdateInput {
	isPublished: Boolean
	name: String
	description: String
  postedBy: UserUpdateOneWithoutCoursesInput
}

input UserUpdateOneWithoutCoursesInput {
  create: UserCreateWithoutCoursesInput
  update: UserUpdateWithoutCoursesDataInput
  upsert: UserUpsertWithoutCoursesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCoursesDataInput {
  email: String
  password: String
}

input UserUpsertWithoutCoursesInput {
  update: UserUpdateWithoutCoursesDataInput!
  create: UserCreateWithoutCoursesInput!
}

input CourseWhereUniqueInput {
	id: ID
}
